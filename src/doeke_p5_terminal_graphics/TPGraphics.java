
/*
TODO 

- stop_terminal_canvas
- use a shader to compute the average in rows and cells
- maybe set a small portion of the pixels and only get those?
- or can we pass a texture and set them on the texture?
- draw terminal on a thread?
- pass all changes in one string?


*/
package doeke_p5_terminal_graphics;

import static doeke_sfjl.sfjl_terminal_canvas.*;

import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;
import processing.opengl.PGraphics3D;
import processing.opengl.PGraphicsOpenGL;
import processing.opengl.PSurfaceJOGL;

import static processing.core.PApplet.map;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;



public class TPGraphics extends PGraphics3D {



    int[][] char_index_avg_data = {{33, 21}, {34, 15}, {35, 49}, {36, 53}, {37, 56}, {38, 59}, {39, 10}, {40, 35}, {41, 35}, {42, 28}, {43, 23}, {44, 12}, {45, 8}, {46, 5}, {47, 21}, {48, 65}, {49, 35}, {50, 40}, {51, 42}, {53, 46}, {54, 52}, {55, 33}, {56, 55}, {57, 52}, {58, 11}, {59, 18}, {60, 23}, {61, 24}, {62, 23}, {63, 28}, {64, 57}, {65, 49}, {66, 57}, {67, 36}, {68, 54}, {69, 44}, {70, 37}, {71, 47}, {72, 52}, {73, 38}, {74, 33}, {75, 49}, {76, 31}, {77, 66}, {78, 60}, {79, 52}, {80, 45}, {81, 59}, {82, 55}, {83, 41}, {84, 34}, 
        {85, 48}, {86, 44}, {87, 68}, {88, 47}, {89, 35}, {90, 44}, {91, 41}, {92, 21}, {93, 41}, {94, 22}, {95, 12}, {96, 4}, {97, 42}, {98, 49}, {99, 29}, {100, 49}, {101, 39}, {102, 34}, {103, 55}, {104, 44}, {105, 25}, {106, 34}, {107, 42}, {108, 29}, {109, 47}, {110, 37}, {111, 40}, {112, 48}, {113, 48}, {114, 27}, {115, 34}, {116, 34}, {117, 37}, {118, 30}, {119, 46}, {120, 34}, {121, 38}, {122, 36}, {123, 38}, {124, 19}, {125, 38}, {126, 14}, {161, 20}, {162, 46}, {163, 42}, {164, 40}, {165, 46}, {166, 17}, {167, 59}, {168, 6}, {169, 58}, 
        {170, 21}, {171, 29}, {172, 15}, {173, 8}, {174, 59}, {175, 5}, {176, 9}, {177, 35}, {178, 22}, {179, 23}, {180, 4}, {182, 70}, {183, 5}, {184, 5}, {185, 18}, {186, 20}, {187, 29}, {188, 53}, {189, 50}, {190, 54}, {191, 26}, {192, 54}, {193, 54}, {194, 56}, {195, 57}, {196, 56}, {197, 55}, {198, 53}, {199, 42}, {200, 49}, {201, 49}, {202, 51}, {203, 51}, {206, 45}, {207, 45}, {208, 58}, {209, 67}, {210, 57}, {211, 57}, {212, 59}, {213, 60}, {214, 59}, {215, 29}, {216, 66}, {217, 52}, {218, 52}, {219, 55}, {220, 55}, {221, 40}, {222, 45}, {223, 56}, 
        {224, 47}, {225, 47}, {226, 49}, {227, 50}, {228, 49}, {229, 48}, {230, 52}, {231, 35}, {232, 44}, {233, 44}, {234, 46}, {235, 46}, {236, 26}, {237, 26}, {238, 29}, {239, 29}, {240, 59}, {241, 45}, {242, 44}, {243, 44}, {244, 46}, {245, 47}, {246, 47}, {247, 21}, {248, 50}, {249, 41}, {250, 41}, {251, 44}, {252, 44}, {253, 42}, {254, 54}, {255, 45}, {256, 54}, {257, 48}, {258, 56}, {259, 50}, {260, 55}, {261, 48}, {262, 40}, {263, 34}, {265, 36}, {266, 39}, {267, 33}, {269, 36}, {270, 60}, {271, 56}, {272, 58}, {273, 52}, {274, 49}, {275, 44}, {276, 51}, 
        {277, 46}, {278, 47}, {280, 50}, {281, 45}, {282, 51}, {283, 46}, {284, 54}, {285, 62}, {286, 54}, {287, 62}, {288, 50}, {289, 58}, {290, 49}, {291, 62}, {292, 59}, {293, 50}, {294, 60}, {295, 47}, {296, 46}, {297, 30}, {299, 27}, {300, 45}, {301, 29}, {302, 44}, {303, 31}, {304, 42}, {305, 22}, {306, 52}, {307, 47}, {308, 40}, {309, 37}, {310, 52}, {311, 45}, {312, 35}, {313, 35}, {314, 34}, {315, 34}, {316, 32}, {317, 36}, {318, 34}, {319, 34}, {320, 33}, {321, 36}, {322, 38}, {323, 64}, {324, 41}, {325, 63}, {326, 40}, {327, 66}, {328, 44}, {329, 42}, 
        {330, 70}, {331, 47}, {332, 57}, {333, 45}, {334, 59}, {335, 47}, {336, 58}, {337, 45}, {338, 61}, {339, 50}, {340, 60}, {341, 31}, {342, 58}, {343, 30}, {344, 62}, {345, 33}, {346, 46}, {347, 39}, {348, 48}, {349, 41}, {350, 47}, {351, 40}, {352, 48}, {353, 41}, {354, 40}, {355, 39}, {356, 41}, {357, 40}, {358, 38}, {359, 37}, {360, 56}, {361, 45}, {362, 53}, {363, 42}, {364, 55}, {365, 44}, {366, 54}, {368, 53}, {370, 53}, {371, 42}, {372, 75}, {373, 53}, {374, 42}, {375, 45}, {376, 42}, {377, 48}, {378, 41}, {379, 47}, {380, 39}, {381, 51}, {383, 29}, 
        {384, 53}, {385, 61}, {386, 52}, {387, 56}, {388, 45}, {389, 35}, {390, 36}, {391, 45}, {392, 34}, {393, 58}, {394, 47}, {395, 52}, {396, 56}, {397, 49}, {398, 44}, {399, 53}, {400, 42}, {402, 38}, {403, 50}, {404, 51}, {405, 36}, {406, 26}, {407, 45}, {408, 48}, {409, 47}, {410, 36}, {411, 44}, {412, 61}, {413, 65}, {414, 42}, {415, 60}, {416, 55}, {419, 39}, {420, 47}, {421, 58}, {422, 54}, {423, 41}, {424, 34}, {425, 45}, {426, 42}, {427, 44}, {428, 36}, {429, 40}, {430, 44}, {431, 51}, {432, 40}, {433, 57}, {434, 47}, {435, 35}, {436, 41}, {437, 50}, 
        {438, 42}, {439, 42}, {440, 42}, {441, 41}, {443, 46}, {444, 37}, {445, 27}, {446, 32}, {447, 44}, {448, 19}, {449, 39}, {450, 40}, {451, 21}, {452, 52}, {453, 48}, {454, 46}, {455, 32}, {456, 32}, {457, 31}, {458, 46}, {459, 46}, {460, 35}, {461, 56}, {462, 49}, {463, 45}, {464, 29}, {465, 59}, {466, 46}, {467, 55}, {468, 44}, {469, 60}, {470, 49}, {471, 59}, {472, 48}, {473, 61}, {474, 51}, {475, 59}, {476, 48}, {477, 39}, {478, 61}, {479, 54}, {480, 58}, {481, 51}, {482, 58}, {483, 57}, {484, 51}, {485, 58}, {486, 54}, {487, 62}, {488, 56}, {489, 49}, 
        {490, 57}, {491, 45}, {492, 62}, {493, 50}, {494, 49}, {495, 48}, {496, 37}, {497, 49}, {498, 45}, {500, 51}, {501, 60}, {502, 34}, {503, 45}, {504, 64}, {505, 41}, {506, 60}, {507, 53}, {508, 58}, {509, 56}, {510, 71}, {511, 55}, {512, 55}, {513, 48}, {514, 56}, {515, 50}, {516, 50}, {517, 45}, {518, 51}, {519, 46}, {520, 44}, {521, 28}, {522, 45}, {523, 29}, {524, 58}, {525, 45}, {526, 59}, {527, 47}, {528, 61}, {529, 32}, {530, 62}, {531, 34}, {532, 53}, {534, 55}, {535, 44}, {536, 44}, {537, 37}, {538, 37}, {539, 36}, {540, 35}, {541, 33}, {542, 59}, 
        {543, 50}, {544, 54}, {545, 50}, {546, 54}, {547, 54}, {548, 47}, {549, 39}, {550, 53}, {551, 46}, {552, 50}, {553, 44}, {554, 64}, {555, 52}, {556, 65}, {557, 53}, {558, 56}, {560, 61}, {561, 48}, {562, 40}, {564, 41}, {565, 39}, {566, 41}, {567, 30}, {568, 50}, {569, 50}, {570, 63}, {571, 53}, {572, 45}, {573, 35}, {574, 49}, {575, 22}, {576, 17}, {577, 37}, {592, 37}, {593, 42}, {594, 42}, {595, 53}, {596, 29}, {597, 38}, {598, 55}, {599, 48}, {600, 39}, {601, 39}, {602, 34}, {603, 33}, {604, 33}, {605, 29}, {606, 40}, {607, 33}, {608, 59}, {609, 55}, 
        {610, 34}, {611, 39}, {612, 32}, {614, 48}, {615, 58}, {616, 32}, {617, 20}, {618, 32}, {619, 35}, {620, 37}, {621, 35}, {622, 46}, {623, 47}, {624, 53}, {625, 57}, {627, 42}, {629, 47}, {630, 44}, {631, 46}, {632, 59}, {633, 27}, {634, 33}, {635, 32}, {636, 32}, {637, 37}, {638, 20}, {639, 20}, {640, 39}, {641, 39}, {642, 45}, {643, 32}, {645, 32}, {646, 45}, {647, 34}, {648, 39}, {649, 46}, {650, 41}, {651, 35}, {652, 30}, {653, 46}, {654, 39}, {655, 25}, {656, 38}, {657, 47}, {658, 41}, {659, 48}, {660, 29}, {661, 29}, {662, 29}, {663, 35}, {664, 58}, 
        {665, 41}, {666, 40}, {667, 39}, {668, 37}, {669, 38}, {670, 41}, {671, 22}, {672, 52}, {673, 36}, {674, 36}, {675, 49}, {676, 52}, {677, 59}, {678, 39}, {679, 39}, {680, 53}, {681, 48}, {682, 36}, {683, 39}, {684, 54}, {685, 46}, {686, 34}, {687, 34}, {688, 22}, {689, 24}, {690, 17}, {691, 13}, {692, 13}, {693, 19}, {694, 20}, {695, 23}, {696, 19}, {697, 8}, {698, 17}, {699, 6}, {700, 6}, {701, 6}, {702, 4}, {703, 4}, {704, 7}, {705, 7}, {706, 12}, {707, 12}, {708, 12}, {709, 12}, {710, 6}, {711, 6}, {712, 3}, {713, 5}, {714, 4}, {715, 4}, 
        {716, 3}, {717, 5}, {718, 4}, {719, 4}, {720, 18}, {721, 9}, {722, 4}, {723, 4}, {724, 5}, {725, 5}, {726, 5}, {727, 8}, {728, 7}, {729, 3}, {730, 5}, {731, 5}, {732, 7}, {733, 5}, {734, 9}, {735, 29}, {736, 20}, {737, 15}, {738, 17}, {739, 17}, {740, 14}, {741, 15}, {742, 15}, {743, 15}, {744, 15}, {745, 15}, {746, 9}, {747, 9}, {748, 6}, {749, 13}, {750, 13}, {751, 5}, {752, 5}, {753, 5}, {754, 5}, {755, 5}, {756, 4}, {757, 5}, {758, 5}, {759, 7}, {760, 11}, {761, 13}, {762, 13}, {763, 13}, {764, 13}, {765, 26}, {766, 20}, 
        {767, 11}, {768, 2}, {769, 2}, {770, 3}, {771, 3}, {772, 2}, {773, 5}, {774, 3}, {775, 1}, {776, 3}, {777, 2}, {778, 2}, {779, 2}, {780, 3}, {781, 1}, {782, 3}, {783, 2}, {784, 4}, {785, 3}, {786, 2}, {787, 3}, {788, 2}, {789, 3}, {792, 3}, {793, 1}, {794, 4}, {795, 4}, {798, 2}, {799, 2}, {801, 9}, {802, 3}, {806, 3}, {807, 2}, {808, 1}, {809, 1}, {810, 4}, {811, 6}, {819, 9}, {820, 3}, {821, 2}, {822, 5}, {823, 6}, {824, 10}, {825, 2}, {826, 3}, {827, 3}, {828, 4}, {829, 3}, {830, 3}, {831, 11}, {832, 2}, 
        {833, 2}, {834, 3}, {835, 3}, {836, 5}, {838, 4}, {839, 9}, {840, 5}, {841, 3}, {842, 5}, {843, 6}, {844, 7}, {845, 8}, {846, 3}, {848, 2}, {849, 1}, {850, 4}, {851, 2}, {852, 2}, {853, 2}, {854, 4}, {855, 2}, {856, 3}, {857, 2}, {858, 5}, {859, 4}, {860, 14}, {861, 14}, {862, 10}, {864, 15}, {865, 14}, {866, 14}, {867, 5}, {868, 4}, {869, 2}, {870, 4}, {871, 4}, {872, 2}, {873, 7}, {874, 4}, {875, 5}, {876, 1}, {878, 3}, {879, 4}, {884, 8}, {885, 1}, {890, 1}, {894, 18}, {900, 2}, {901, 11}, {902, 25}, 
        {903, 5}, {904, 28}, {905, 27}, {906, 12}, {908, 28}, {910, 19}, {911, 31}, {912, 12}, {913, 49}, {914, 57}, {915, 31}, {916, 52}, {917, 44}, {918, 44}, {919, 52}, {920, 58}, {921, 38}, {922, 49}, {923, 44}, {924, 66}, {925, 60}, {926, 33}, {927, 52}, {928, 54}, {929, 45}, {931, 45}, {932, 34}, {933, 35}, {934, 54}, {935, 47}, {937, 57}, {938, 13}, {939, 20}, {940, 22}, {941, 18}, {942, 22}, {943, 10}, {944, 20}, {945, 20}, {946, 28}, {947, 16}, {948, 24}, {949, 16}, {950, 17}, {951, 20}, {952, 25}, {953, 8}, {954, 17}, {955, 17}, {956, 21}, {957, 13}, 
        {958, 20}, {959, 18}, {960, 39}, {961, 21}, {962, 17}, {963, 19}, {964, 12}, {965, 16}, {966, 28}, {967, 21}, {968, 27}, {969, 23}, {970, 10}, {971, 18}, {972, 20}, {973, 18}, {974, 25}, {976, 50}, {977, 50}, {978, 33}, {979, 31}, {980, 37}, {981, 60}, {982, 46}, {983, 42}, {984, 55}, {985, 44}, {986, 46}, {987, 35}, {988, 35}, {989, 33}, {990, 29}, {991, 34}, {992, 44}, {993, 39}, {994, 35}, {995, 30}, {996, 21}, {997, 20}, {998, 26}, {999, 21}, {1000, 22}, {1001, 19}, {1002, 23}, {1003, 17}, {1004, 25}, {1005, 18}, {1006, 22}, {1007, 15}, {1008, 36}, {1009, 47}, 
        {1010, 15}, {1011, 10}, {1012, 59}, {1013, 32}, {1014, 17}, {1015, 45}, {1016, 53}, {1017, 42}, {1018, 45}, {1020, 23}, {1021, 16}, {1022, 21}, {1023, 21}, {1024, 48}, {1025, 51}, {1026, 58}, {1027, 35}, {1028, 42}, {1029, 42}, {1030, 38}, {1031, 45}, {1032, 33}, {1033, 60}, {1034, 61}, {1035, 52}, {1036, 54}, {1037, 62}, {1038, 48}, {1039, 59}, {1040, 49}, {1041, 52}, {1042, 57}, {1043, 30}, {1044, 70}, {1046, 69}, {1047, 42}, {1048, 57}, {1049, 64}, {1050, 49}, {1051, 51}, {1052, 66}, {1053, 52}, {1054, 52}, {1055, 52}, {1056, 45}, {1057, 36}, {1058, 34}, {1059, 41}, {1060, 63}, {1061, 47}, {1062, 59}, 
        {1063, 44}, {1064, 69}, {1065, 74}, {1066, 46}, {1067, 63}, {1068, 45}, {1069, 42}, {1070, 69}, {1071, 55}, {1073, 53}, {1074, 44}, {1075, 23}, {1076, 52}, {1077, 39}, {1078, 52}, {1079, 33}, {1080, 41}, {1081, 48}, {1082, 35}, {1083, 36}, {1084, 48}, {1085, 36}, {1086, 39}, {1087, 36}, {1088, 48}, {1089, 30}, {1090, 26}, {1091, 38}, {1092, 63}, {1093, 34}, {1094, 42}, {1095, 31}, {1096, 52}, {1097, 56}, {1098, 36}, {1099, 46}, {1100, 34}, {1101, 36}, {1102, 50}, {1103, 41}, {1104, 44}, {1105, 46}, {1106, 58}, {1107, 28}, {1108, 36}, {1109, 34}, {1110, 25}, {1111, 29}, {1112, 34}, {1113, 45}, {1114, 46}, 
        {1115, 48}, {1116, 40}, {1117, 46}, {1118, 45}, {1119, 41}, {1120, 42}, {1123, 44}, {1124, 59}, {1125, 44}, {1126, 54}, {1127, 39}, {1128, 56}, {1129, 49}, {1130, 63}, {1131, 37}, {1132, 55}, {1133, 47}, {1134, 58}, {1135, 47}, {1138, 61}, {1139, 47}, {1140, 41}, {1141, 29}, {1142, 47}, {1143, 35}, {1144, 46}, {1145, 44}, {1146, 55}, {1147, 44}, {1148, 52}, {1149, 53}, {1150, 52}, {1151, 54}, {1152, 42}, {1153, 25}, {1154, 35}, {1155, 4}, {1156, 4}, {1157, 2}, {1158, 7}, {1160, 12}, {1161, 9}, {1162, 72}, {1163, 53}, {1164, 48}, {1165, 38}, {1166, 48}, {1167, 51}, {1168, 36}, {1169, 28}, 
        {1170, 37}, {1171, 29}, {1172, 56}, {1173, 41}, {1174, 73}, {1175, 56}, {1176, 47}, {1177, 39}, {1178, 53}, {1179, 40}, {1180, 58}, {1181, 45}, {1182, 53}, {1183, 46}, {1184, 52}, {1185, 38}, {1186, 57}, {1187, 42}, {1188, 53}, {1189, 39}, {1190, 37}, {1191, 40}, {1192, 64}, {1193, 48}, {1194, 41}, {1195, 35}, {1196, 41}, {1197, 32}, {1198, 35}, {1199, 38}, {1200, 42}, {1201, 44}, {1202, 53}, {1203, 40}, {1204, 51}, {1205, 45}, {1206, 49}, {1207, 36}, {1208, 50}, {1209, 36}, {1210, 44}, {1211, 31}, {1212, 52}, {1213, 42}, {1214, 57}, {1215, 46}, {1216, 38}, {1217, 76}, {1218, 59}, {1219, 56}, {1220, 38}, 
        {1221, 58}, {1223, 62}, {1224, 44}, {1225, 57}, {1226, 42}, {1227, 50}, {1228, 35}, {1229, 54}, {1230, 52}, {1232, 56}, {1233, 50}, {1234, 56}, {1235, 50}, {1236, 53}, {1237, 52}, {1238, 50}, {1239, 47}, {1240, 46}, {1241, 39}, {1242, 53}, {1243, 46}, {1244, 76}, {1245, 58}, {1246, 49}, {1247, 40}, {1248, 42}, {1249, 39}, {1250, 62}, {1251, 46}, {1252, 64}, {1253, 48}, {1254, 59}, {1255, 46}, {1256, 60}, {1257, 46}, {1258, 67}, {1259, 53}, {1260, 49}, {1262, 46}, {1264, 48}, {1265, 45}, {1266, 47}, {1267, 44}, {1268, 51}, {1269, 37}, {1270, 19}, {1271, 17}, {1272, 70}, {1273, 53}, {1281, 49}, {1282, 44}, 
        {1283, 45}, {1284, 38}, {1285, 34}, {1286, 40}, {1287, 29}, {1288, 46}, {1289, 38}, {1290, 33}, {1291, 33}, {1292, 48}, {1293, 32}, {1294, 47}, {1295, 39}, {1329, 47}, {1330, 35}, {1331, 37}, {1332, 33}, {1333, 36}, {1335, 35}, {1336, 35}, {1337, 44}, {1338, 37}, {1339, 31}, {1340, 28}, {1341, 47}, {1342, 41}, {1343, 32}, {1344, 25}, {1345, 44}, {1346, 33}, {1347, 35}, {1348, 44}, {1349, 39}, {1350, 33}, {1351, 36}, {1352, 39}, {1353, 38}, {1354, 44}, {1355, 40}, {1356, 44}, {1357, 42}, {1358, 37}, {1359, 34}, {1360, 30}, {1361, 35}, {1362, 31}, {1363, 52}, {1364, 40}, {1365, 35}, {1366, 48}, {1369, 5}, 
        {1370, 5}, {1371, 4}, {1372, 5}, {1373, 4}, {1374, 11}, {1375, 4}, {1377, 33}, {1378, 30}, {1379, 32}, {1380, 30}, {1381, 30}, {1382, 30}, {1383, 26}, {1384, 28}, {1385, 51}, {1386, 29}, {1387, 35}, {1388, 15}, {1390, 25}, {1391, 35}, {1392, 23}, {1393, 27}, {1394, 28}, {1395, 33}, {1396, 31}, {1397, 17}, {1398, 31}, {1399, 19}, {1400, 22}, {1401, 15}, {1402, 39}, {1403, 21}, {1404, 24}, {1405, 22}, {1406, 35}, {1407, 31}, {1408, 28}, {1409, 35}, {1410, 12}, {1411, 46}, {1412, 33}, {1413, 18}, {1414, 47}, {1415, 31}, {1417, 7}, {1418, 4}, {1425, 2}, {1426, 2}, {1427, 4}, {1428, 1}, {1429, 2}, 
        {1430, 2}, {1431, 1}, {1432, 3}, {1433, 4}, {1435, 1}, {1436, 2}, {1438, 3}, {1439, 8}, {1440, 3}, {1441, 6}, {1442, 1}, {1444, 1}, {1446, 2}, {1447, 1}, {1448, 1}, {1449, 8}, {1450, 2}, {1451, 2}, {1452, 1}, {1454, 7}, {1455, 4}, {1457, 1}, {1458, 2}, {1459, 3}, {1461, 1}, {1462, 1}, {1463, 1}, {1464, 1}, {1465, 1}, {1466, 1}, {1467, 1}, {1468, 1}, {1469, 1}, {1470, 5}, {1471, 2}, {1472, 10}, {1474, 1}, {1475, 7}, {1478, 9}, {1479, 1}, {1488, 38}, {1489, 34}, {1490, 24}, {1491, 26}, {1492, 36}, {1493, 17}, {1494, 19}, {1495, 40}, {1496, 36}, {1497, 11}, {1498, 28}, 
        {1499, 31}, {1500, 31}, {1501, 49}, {1502, 46}, {1503, 20}, {1504, 22}, {1506, 35}, {1507, 31}, {1508, 38}, {1509, 29}, {1510, 38}, {1511, 41}, {1512, 22}, {1520, 35}, {1521, 28}, {1522, 22}, {1523, 5}, {1524, 11}, {1536, 2}, {1537, 6}, {1538, 3}, {1539, 6}, {1547, 17}, {1548, 6}, {1549, 3}, {1550, 13}, {1551, 21}, {1552, 1}, {1553, 1}, {1554, 2}, {1555, 2}, {1557, 2}, {1563, 11}, {1566, 5}, {1567, 13}, {1569, 7}, {1570, 10}, {1571, 9}, {1572, 17}, {1573, 9}, {1574, 19}, {1575, 6}, {1576, 16}, {1577, 14}, {1578, 18}, {1579, 20}, {1580, 18}, {1581, 17}, {1582, 18}, {1583, 9}, {1584, 11}, 
        {1585, 11}, {1586, 13}, {1587, 22}, {1588, 27}, {1589, 24}, {1590, 25}, {1591, 23}, {1592, 25}, {1593, 14}, {1594, 16}, {1600, 10}, {1601, 22}, {1602, 24}, {1603, 19}, {1604, 15}, {1605, 18}, {1606, 17}, {1607, 10}, {1608, 14}, {1609, 16}, {1610, 17}, {1612, 1}, {1617, 1}, {1618, 1}, {1619, 2}, {1620, 1}, {1623, 2}, {1628, 2}, {1629, 2}, {1632, 4}, {1633, 8}, {1634, 13}, {1635, 14}, {1636, 13}, {1637, 12}, {1638, 10}, {1639, 13}, {1640, 13}, {1641, 15}, {1642, 20}, {1643, 6}, {1644, 6}, {1645, 11}, {1646, 14}, {1647, 21}, {1649, 9}, {1650, 10}, {1651, 9}, {1652, 3}, {1653, 9}, {1654, 17}, 
        {1655, 20}, {1656, 19}, {1657, 18}, {1658, 18}, {1659, 17}, {1660, 20}, {1661, 20}, {1662, 18}, {1663, 21}, {1664, 19}, {1665, 20}, {1666, 20}, {1667, 20}, {1668, 20}, {1669, 22}, {1670, 22}, {1671, 24}, {1672, 13}, {1673, 12}, {1674, 11}, {1675, 15}, {1676, 13}, {1677, 13}, {1678, 15}, {1679, 15}, {1680, 16}, {1681, 15}, {1682, 13}, {1683, 14}, {1684, 13}, {1685, 12}, {1686, 15}, {1687, 15}, {1688, 16}, {1689, 18}, {1690, 25}, {1691, 26}, {1692, 31}, {1693, 27}, {1694, 29}, {1695, 28}, {1696, 20}, {1697, 21}, {1698, 22}, {1699, 24}, {1700, 26}, {1701, 25}, {1702, 28}, {1703, 22}, {1704, 26}, {1705, 21}, 
        {1706, 20}, {1707, 24}, {1708, 20}, {1709, 24}, {1710, 23}, {1711, 24}, {1712, 26}, {1713, 27}, {1714, 27}, {1715, 26}, {1716, 29}, {1717, 18}, {1718, 17}, {1719, 21}, {1720, 17}, {1721, 18}, {1722, 16}, {1723, 20}, {1724, 18}, {1725, 21}, {1726, 16}, {1727, 24}, {1728, 13}, {1729, 10}, {1730, 13}, {1731, 14}, {1732, 16}, {1733, 17}, {1734, 16}, {1735, 17}, {1736, 15}, {1737, 16}, {1738, 17}, {1739, 19}, {1740, 16}, {1741, 17}, {1742, 18}, {1743, 16}, {1744, 17}, {1745, 17}, {1746, 15}, {1747, 18}, {1748, 2}, {1749, 10}, {1750, 3}, {1751, 2}, {1754, 2}, {1756, 2}, {1757, 29}, {1758, 20}, {1761, 1}, 
        {1762, 1}, {1764, 2}, {1765, 2}, {1766, 2}, {1767, 1}, {1768, 1}, {1769, 39}, {1770, 1}, {1771, 1}, {1773, 1}, {1774, 12}, {1775, 13}, {1776, 4}, {1777, 8}, {1778, 13}, {1779, 14}, {1780, 14}, {1781, 17}, {1782, 15}, {1783, 13}, {1784, 13}, {1785, 15}, {1786, 29}, {1787, 27}, {1788, 18}, {1789, 11}, {1790, 22}, {1791, 19}, {1872, 20}, {1873, 21}, {1874, 17}, {1875, 21}, {1876, 20}, {1877, 17}, {1878, 17}, {1879, 20}, {1880, 22}, {1881, 16}, {1882, 16}, {1883, 14}, {1884, 29}, {1885, 18}, {1886, 20}, {1887, 18}, {1888, 24}, {1889, 24}, {1890, 23}, {1891, 27}, {1892, 24}, {1893, 20}, {1894, 20}, 
        {1895, 19}, {1896, 22}, {1897, 20}, {1898, 17}, {1899, 15}, {1900, 14}, {1901, 25}, {2304, 10}, {2305, 28}, {2306, 23}, {2307, 16}, {2308, 53}, {2309, 44}, {2310, 41}, {2311, 44}, {2312, 52}, {2313, 32}, {2314, 42}, {2315, 52}, {2316, 49}, {2317, 46}, {2318, 47}, {2319, 37}, {2320, 44}, {2321, 47}, {2322, 48}, {2323, 46}, {2324, 48}, {2325, 46}, {2326, 53}, {2327, 35}, {2328, 44}, {2330, 44}, {2331, 48}, {2332, 45}, {2333, 59}, {2334, 44}, {2335, 32}, {2336, 40}, {2337, 41}, {2338, 39}, {2339, 42}, {2340, 39}, {2342, 38}, {2343, 41}, {2344, 33}, {2345, 35}, {2346, 37}, {2347, 45}, {2348, 45}, {2349, 36}, 
        {2350, 40}, {2351, 41}, {2352, 26}, {2353, 28}, {2354, 47}, {2355, 48}, {2356, 50}, {2357, 40}, {2358, 44}, {2359, 42}, {2360, 47}, {2361, 42}, {2362, 4}, {2363, 23}, {2364, 21}, {2365, 27}, {2366, 17}, {2367, 17}, {2368, 26}, {2369, 28}, {2370, 28}, {2371, 23}, {2372, 23}, {2373, 26}, {2374, 24}, {2375, 23}, {2376, 27}, {2377, 20}, {2378, 24}, {2379, 23}, {2380, 26}, {2381, 24}, {2382, 17}, {2383, 30}, {2385, 4}, {2386, 4}, {2387, 5}, {2388, 5}, {2389, 12}, {2390, 4}, {2391, 4}, {2392, 48}, {2393, 55}, {2394, 37}, {2395, 47}, {2397, 41}, {2398, 47}, {2400, 53}, {2401, 51}, {2402, 29}, {2403, 29}, 
        {2404, 14}, {2405, 28}, {2406, 19}, {2407, 26}, {2408, 24}, {2409, 29}, {2410, 32}, {2411, 24}, {2412, 32}, {2413, 36}, {2414, 20}, {2415, 26}, {2416, 15}, {2417, 3}, {2418, 49}, {2419, 47}, {2420, 41}, {2421, 48}, {2422, 51}, {2423, 51}, {2424, 33}, {2425, 49}, {2426, 45}, {2427, 41}, {2428, 53}, {2429, 19}, {2430, 44}, {2431, 51}, {2432, 30}, {2433, 28}, {2434, 19}, {2435, 20}, {2437, 39}, {2438, 48}, {2439, 47}, {2440, 59}, {2441, 56}, {2442, 57}, {2443, 51}, {2444, 39}, {2447, 40}, {2448, 52}, {2451, 32}, {2452, 47}, {2453, 47}, {2454, 46}, {2455, 39}, {2456, 46}, {2457, 47}, {2458, 39}, {2459, 50}, 
        {2460, 47}, {2461, 47}, {2462, 42}, {2463, 49}, {2464, 47}, {2465, 42}, {2466, 36}, {2467, 35}, {2468, 40}, {2469, 46}, {2470, 37}, {2471, 42}, {2472, 38}, {2474, 41}, {2475, 46}, {2476, 40}, {2477, 41}, {2478, 41}, {2479, 41}, {2480, 42}, {2482, 45}, {2486, 39}, {2487, 44}, {2489, 36}, {2492, 20}, {2493, 28}, {2494, 17}, {2495, 35}, {2496, 39}, {2497, 28}, {2498, 24}, {2499, 25}, {2500, 26}, {2503, 20}, {2504, 24}, {2507, 20}, {2508, 25}, {2509, 23}, {2510, 30}, {2519, 24}, {2524, 44}, {2525, 38}, {2528, 60}, {2529, 48}, {2530, 27}, {2531, 32}, {2534, 28}, {2535, 25}, {2536, 24}, {2537, 33}, {2538, 38}, 
        {2539, 36}, {2540, 34}, {2541, 32}, {2542, 35}, {2543, 37}, {2546, 13}, {2547, 32}, {2548, 12}, {2549, 24}, {2550, 33}, {2551, 14}, {2552, 25}, {2553, 19}, {2554, 18}, {2555, 14}, {2561, 9}, {2562, 2}, {2563, 5}, {2565, 46}, {2566, 41}, {2567, 50}, {2568, 52}, {2569, 81}, {2570, 80}, {2575, 59}, {2576, 64}, {2579, 68}, {2580, 58}, {2581, 48}, {2582, 51}, {2583, 54}, {2584, 41}, {2585, 56}, {2586, 52}, {2587, 60}, {2588, 48}, {2589, 54}, {2590, 50}, {2591, 44}, {2592, 48}, {2593, 52}, {2594, 53}, {2595, 46}, {2596, 45}, {2597, 57}, {2598, 46}, {2599, 50}, {2600, 45}, {2603, 53}, {2604, 56}, {2605, 54}, 
        {2606, 42}, {2607, 50}, {2608, 48}, {2610, 52}, {2611, 54}, {2613, 48}, {2614, 50}, {2616, 48}, {2620, 2}, {2622, 14}, {2623, 34}, {2624, 33}, {2625, 4}, {2626, 4}, {2631, 3}, {2632, 6}, {2635, 4}, {2636, 10}, {2637, 6}, {2641, 3}, {2649, 53}, {2650, 54}, {2651, 50}, {2652, 50}, {2654, 55}, {2662, 44}, {2663, 35}, {2664, 41}, {2665, 46}, {2666, 46}, {2667, 42}, {2668, 50}, {2669, 32}, {2670, 35}, {2671, 44}, {2672, 8}, {2673, 10}, {2674, 49}, {2675, 70}, {2676, 49}, {2689, 7}, {2690, 3}, {2691, 6}, {2693, 40}, {2694, 41}, {2695, 35}, {2696, 40}, {2697, 48}, {2698, 48}, {2699, 48}, {2700, 39}, 
        {2701, 47}, {2703, 47}, {2704, 52}, {2705, 45}, {2707, 45}, {2708, 48}, {2709, 33}, {2710, 42}, {2711, 36}, {2712, 39}, {2713, 29}, {2714, 39}, {2715, 47}, {2716, 45}, {2717, 42}, {2718, 39}, {2719, 31}, {2720, 38}, {2721, 26}, {2722, 38}, {2723, 31}, {2724, 33}, {2725, 44}, {2726, 27}, {2727, 40}, {2728, 28}, {2730, 33}, {2731, 39}, {2732, 39}, {2733, 42}, {2734, 35}, {2735, 40}, {2736, 27}, {2738, 40}, {2739, 36}, {2741, 36}, {2742, 46}, {2743, 38}, {2744, 46}, {2745, 35}, {2748, 3}, {2749, 27}, {2750, 16}, {2751, 27}, {2752, 27}, {2753, 10}, {2754, 12}, {2755, 6}, {2756, 7}, {2757, 5}, {2759, 3}, 
        {2760, 6}, {2761, 24}, {2763, 22}, {2764, 27}, {2765, 5}, {2768, 49}, {2784, 50}, {2785, 44}, {2786, 7}, {2787, 7}, {2790, 35}, {2791, 25}, {2792, 27}, {2793, 28}, {2794, 35}, {2795, 33}, {2796, 29}, {2797, 40}, {2798, 23}, {2799, 32}, {2801, 40}, {2817, 6}, {2818, 5}, {2819, 25}, {2821, 36}, {2822, 38}, {2823, 40}, {2824, 42}, {2825, 39}, {2826, 41}, {2827, 35}, {2828, 35}, {2831, 31}, {2832, 41}, {2835, 36}, {2837, 36}, {2838, 36}, {2839, 33}, {2840, 33}, {2841, 36}, {2842, 35}, {2843, 45}, {2844, 39}, {2845, 37}, {2846, 52}, {2847, 32}, {2848, 28}, {2849, 38}, {2850, 39}, {2851, 39}, {2852, 36}, 
        {2853, 39}, {2854, 34}, {2855, 34}, {2856, 36}, {2858, 35}, {2859, 36}, {2860, 37}, {2861, 37}, {2862, 34}, {2863, 37}, {2864, 34}, {2866, 37}, {2867, 35}, {2869, 38}, {2870, 37}, {2871, 44}, {2872, 39}, {2873, 39}, {2877, 22}, {2878, 11}, {2879, 2}, {2880, 15}, {2881, 6}, {2882, 6}, {2883, 7}, {2884, 7}, {2887, 31}, {2888, 26}, {2891, 17}, {2892, 22}, {2893, 3}, {2902, 7}, {2903, 19}, {2908, 39}, {2909, 40}, {2911, 41}, {2912, 36}, {2913, 37}, {2914, 5}, {2915, 5}, {2918, 24}, {2919, 27}, {2920, 27}, {2921, 32}, {2922, 30}, {2923, 32}, {2924, 31}, {2925, 31}, {2926, 15}, {2927, 26}, {2928, 22}, 
        {2929, 37}, {2947, 32}, {2949, 40}, {2950, 51}, {2951, 67}, {2952, 29}, {2953, 27}, {2954, 41}, {2958, 33}, {2959, 37}, {2960, 52}, {2962, 47}, {2963, 52}, {2964, 39}, {2965, 40}, {2969, 39}, {2970, 33}, {2972, 56}, {2974, 45}, {2975, 17}, {2979, 41}, {2980, 48}, {2984, 45}, {2985, 38}, {2986, 25}, {2990, 35}, {2991, 34}, {2992, 28}, {2993, 41}, {2994, 33}, {2995, 39}, {2996, 45}, {2997, 38}, {2998, 29}, {2999, 37}, {3000, 32}, {3001, 45}, {3006, 24}, {3007, 24}, {3008, 14}, {3009, 16}, {3010, 30}, {3015, 48}, {3016, 37}, {3018, 19}, {3019, 18}, {3020, 9}, {3021, 3}, {3024, 50}, {3031, 39}, {3046, 21}, 
        {3047, 34}, {3048, 32}, {3049, 31}, {3050, 28}, {3051, 58}, {3052, 34}, {3053, 31}, {3054, 38}, {3055, 38}, {3056, 26}, {3057, 30}, {3058, 46}, {3059, 32}, {3060, 46}, {3061, 55}, {3062, 42}, {3063, 34}, {3064, 45}, {3065, 68}, {3066, 48}, {3072, 6}, {3073, 20}, {3074, 25}, {3075, 21}, {3077, 38}, {3078, 41}, {3079, 42}, {3080, 51}, {3081, 50}, {3082, 48}, {3083, 33}, {3084, 36}, {3086, 35}, {3087, 41}, {3088, 39}, {3090, 35}, {3091, 38}, {3092, 58}, {3093, 41}, {3094, 49}, {3095, 40}, {3096, 45}, {3098, 42}, {3099, 45}, {3100, 42}, {3101, 50}, {3102, 46}, {3103, 39}, {3104, 48}, {3105, 48}, {3106, 52}, 
        {3107, 39}, {3108, 51}, {3109, 50}, {3111, 47}, {3112, 41}, {3114, 44}, {3115, 48}, {3116, 38}, {3117, 51}, {3118, 44}, {3119, 48}, {3120, 45}, {3122, 41}, {3123, 49}, {3125, 45}, {3126, 44}, {3127, 46}, {3128, 39}, {3133, 29}, {3134, 24}, {3135, 40}, {3136, 44}, {3137, 22}, {3138, 33}, {3139, 25}, {3140, 35}, {3142, 33}, {3143, 41}, {3144, 39}, {3146, 40}, {3148, 34}, {3149, 38}, {3157, 31}, {3158, 26}, {3160, 60}, {3161, 61}, {3168, 39}, {3169, 47}, {3170, 15}, {3171, 16}, {3174, 35}, {3175, 30}, {3176, 34}, {3177, 29}, {3178, 37}, {3179, 38}, {3180, 26}, {3181, 31}, {3182, 32}, {3183, 26}, {3192, 29}, 
        {3193, 13}, {3194, 24}, {3195, 33}, {3196, 12}, {3197, 28}, {3198, 35}, {3199, 29}, {3202, 20}, {3203, 21}, {3205, 39}, {3206, 44}, {3207, 39}, {3208, 45}, {3209, 30}, {3210, 33}, {3211, 42}, {3212, 36}, {3214, 29}, {3215, 35}, {3216, 37}, {3218, 33}, {3219, 39}, {3220, 54}, {3221, 45}, {3222, 38}, {3223, 33}, {3224, 44}, {3225, 42}, {3226, 44}, {3227, 35}, {3228, 40}, {3231, 34}, {3232, 42}, {3233, 44}, {3234, 47}, {3235, 39}, {3236, 49}, {3238, 37}, {3239, 40}, {3240, 40}, {3242, 40}, {3244, 35}, {3246, 36}, {3247, 41}, {3248, 40}, {3249, 42}, {3250, 30}, {3251, 34}, {3253, 30}, {3254, 45}, {3255, 44}, 
        {3256, 37}, {3257, 44}, {3260, 23}, {3261, 22}, {3262, 26}, {3263, 31}, {3264, 36}, {3265, 18}, {3266, 23}, {3267, 14}, {3268, 33}, {3270, 35}, {3271, 37}, {3272, 41}, {3274, 36}, {3275, 36}, {3276, 34}, {3277, 28}, {3285, 21}, {3286, 22}, {3294, 37}, {3296, 37}, {3297, 42}, {3298, 1}, {3299, 1}, {3302, 30}, {3303, 26}, {3304, 31}, {3305, 39}, {3306, 33}, {3307, 48}, {3308, 40}, {3309, 31}, {3310, 30}, {3311, 33}, {3330, 14}, {3331, 14}, {3333, 38}, {3334, 39}, {3335, 48}, {3336, 32}, {3337, 49}, {3338, 32}, {3339, 54}, {3340, 36}, {3342, 42}, {3343, 42}, {3344, 28}, {3346, 38}, {3347, 34}, {3348, 31}, 
        {3349, 37}, {3350, 33}, {3351, 28}, {3352, 34}, {3353, 32}, {3354, 22}, {3355, 32}, {3356, 45}, {3357, 33}, {3358, 33}, {3359, 27}, {3360, 27}, {3361, 26}, {3362, 29}, {3363, 28}, {3364, 35}, {3365, 31}, {3366, 30}, {3367, 24}, {3368, 24}, {3370, 24}, {3371, 27}, {3372, 32}, {3373, 36}, {3374, 40}, {3375, 37}, {3376, 35}, {3377, 25}, {3378, 33}, {3379, 53}, {3380, 32}, {3381, 27}, {3382, 30}, {3383, 36}, {3384, 26}, {3385, 26}, {3389, 14}, {3390, 20}, {3391, 17}, {3392, 22}, {3393, 20}, {3394, 22}, {3395, 22}, {3396, 24}, {3398, 33}, {3399, 31}, {3400, 37}, {3402, 20}, {3403, 18}, {3404, 28}, {3405, 8}, 
        {3415, 28}, {3424, 59}, {3425, 38}, {3426, 6}, {3427, 5}, {3430, 27}, {3431, 31}, {3432, 27}, {3433, 27}, {3435, 51}, {3436, 29}, {3437, 25}, {3438, 32}, {3439, 32}, {3440, 21}, {3441, 28}, {3442, 35}, {3443, 21}, {3444, 46}, {3445, 37}, {3449, 28}, {3450, 27}, {3451, 32}, {3454, 34}, {3455, 44}, {3458, 32}, {3459, 25}, {3461, 67}, {3462, 56}, {3463, 64}, {3464, 64}, {3465, 74}, {3466, 62}, {3467, 45}, {3468, 40}, {3469, 52}, {3470, 51}, {3471, 55}, {3472, 51}, {3473, 64}, {3474, 77}, {3475, 62}, {3476, 72}, {3477, 89}, {3478, 63}, {3482, 54}, {3483, 65}, {3484, 47}, {3485, 66}, {3486, 57}, {3487, 55}, 
        {3488, 59}, {3489, 69}, {3490, 58}, {3491, 58}, {3492, 53}, {3493, 52}, {3494, 54}, {3495, 50}, {3496, 52}, {3497, 54}, {3498, 63}, {3499, 62}, {3500, 67}, {3501, 53}, {3502, 52}, {3503, 62}, {3504, 44}, {3505, 53}, {3507, 64}, {3508, 54}, {3509, 57}, {3510, 64}, {3511, 51}, {3512, 68}, {3513, 69}, {3514, 46}, {3515, 51}, {3517, 58}, {3520, 60}, {3521, 53}, {3522, 68}, {3523, 57}, {3524, 49}, {3525, 65}, {3526, 38}, {3530, 13}, {3535, 23}, {3536, 26}, {3537, 32}, {3538, 25}, {3539, 31}, {3540, 15}, {3542, 16}, {3544, 45}, {3545, 54}, {3546, 24}, {3547, 53}, {3548, 12}, {3549, 12}, {3550, 13}, {3551, 47}, 
        {3570, 54}, {3571, 50}, {3572, 33}, {3585, 28}, {3586, 37}, {3587, 37}, {3588, 37}, {3589, 35}, {3591, 23}, {3592, 29}, {3593, 35}, {3594, 39}, {3595, 39}, {3596, 45}, {3597, 51}, {3598, 48}, {3599, 50}, {3600, 39}, {3602, 51}, {3603, 45}, {3604, 36}, {3605, 37}, {3606, 31}, {3607, 37}, {3608, 34}, {3609, 34}, {3610, 32}, {3611, 37}, {3612, 36}, {3613, 40}, {3615, 48}, {3616, 31}, {3617, 35}, {3618, 33}, {3619, 24}, {3620, 36}, {3621, 36}, {3622, 36}, {3623, 21}, {3624, 40}, {3625, 42}, {3626, 39}, {3627, 36}, {3628, 48}, {3629, 33}, {3630, 38}, {3631, 22}, {3632, 20}, {3633, 11}, {3634, 18}, {3635, 18}, 
        {3636, 4}, {3637, 8}, {3638, 8}, {3639, 9}, {3640, 5}, {3641, 4}, {3642, 2}, {3647, 66}, {3648, 15}, {3649, 31}, {3650, 30}, {3651, 33}, {3652, 31}, {3653, 22}, {3654, 27}, {3655, 9}, {3656, 3}, {3657, 7}, {3658, 7}, {3659, 6}, {3660, 8}, {3661, 6}, {3662, 10}, {3663, 38}, {3664, 21}, {3665, 27}, {3666, 34}, {3667, 29}, {3668, 27}, {3669, 29}, {3670, 25}, {3671, 34}, {3672, 27}, {3673, 29}, {3674, 46}, {3675, 38}, {3713, 34}, {3714, 33}, {3716, 34}, {3719, 29}, {3720, 27}, {3722, 36}, {3725, 34}, {3732, 30}, {3733, 33}, {3734, 36}, {3735, 38}, {3737, 31}, {3738, 28}, {3739, 31}, {3740, 40}, 
        {3741, 38}, {3742, 39}, {3743, 42}, {3745, 30}, {3746, 37}, {3747, 30}, {3749, 32}, {3751, 26}, {3754, 38}, {3755, 36}, {3757, 33}, {3758, 34}, {3759, 29}, {3760, 26}, {3761, 13}, {3762, 19}, {3763, 25}, {3764, 12}, {3765, 14}, {3766, 14}, {3767, 16}, {3768, 5}, {3769, 8}, {3771, 13}, {3772, 11}, {3773, 23}, {3776, 16}, {3777, 32}, {3778, 30}, {3779, 31}, {3780, 25}, {3782, 33}, {3784, 2}, {3785, 7}, {3786, 8}, {3787, 4}, {3788, 5}, {3789, 6}, {3792, 26}, {3793, 26}, {3794, 24}, {3795, 34}, {3796, 31}, {3797, 33}, {3798, 42}, {3799, 38}, {3800, 48}, {3801, 36}, {3804, 34}, {3805, 38}, {3840, 52}, 
        {3841, 28}, {3842, 45}, {3843, 42}, {3844, 37}, {3845, 40}, {3846, 41}, {3847, 29}, {3848, 16}, {3849, 21}, {3851, 2}, {3852, 2}, {3853, 13}, {3854, 27}, {3855, 12}, {3856, 13}, {3857, 13}, {3858, 21}, {3859, 17}, {3860, 16}, {3861, 36}, {3862, 27}, {3863, 29}, {3864, 11}, {3865, 1}, {3866, 5}, {3867, 11}, {3868, 17}, {3869, 3}, {3870, 7}, {3871, 9}, {3872, 11}, {3873, 12}, {3874, 14}, {3875, 18}, {3876, 16}, {3877, 14}, {3878, 18}, {3879, 19}, {3880, 13}, {3881, 17}, {3882, 20}, {3883, 22}, {3884, 26}, {3885, 25}, {3886, 22}, {3887, 27}, {3888, 27}, {3889, 22}, {3890, 25}, {3891, 19}, {3892, 12}, 
        {3894, 12}, {3896, 19}, {3897, 3}, {3898, 31}, {3899, 29}, {3900, 21}, {3901, 21}, {3902, 6}, {3903, 6}, {3904, 27}, {3905, 26}, {3906, 30}, {3907, 36}, {3908, 19}, {3909, 24}, {3910, 28}, {3911, 24}, {3913, 28}, {3914, 26}, {3915, 27}, {3916, 24}, {3917, 31}, {3918, 29}, {3919, 26}, {3920, 27}, {3921, 24}, {3922, 31}, {3923, 29}, {3924, 24}, {3925, 26}, {3926, 27}, {3927, 35}, {3928, 28}, {3929, 27}, {3930, 31}, {3931, 27}, {3932, 35}, {3933, 28}, {3934, 31}, {3935, 28}, {3936, 20}, {3937, 28}, {3938, 19}, {3939, 26}, {3940, 27}, {3941, 27}, {3942, 27}, {3943, 29}, {3944, 38}, {3945, 35}, {3946, 19}, 
        {3947, 27}, {3948, 19}, {3953, 16}, {3954, 4}, {3955, 28}, {3956, 14}, {3957, 21}, {3958, 23}, {3959, 35}, {3960, 37}, {3961, 36}, {3962, 3}, {3963, 5}, {3964, 7}, {3965, 8}, {3966, 3}, {3967, 18}, {3968, 9}, {3969, 28}, {3970, 4}, {3971, 4}, {3973, 26}, {3974, 2}, {3975, 4}, {3976, 7}, {3978, 28}, {3979, 17}, {3984, 20}, {3985, 25}, {3986, 23}, {3987, 32}, {3988, 19}, {3989, 24}, {3990, 28}, {3991, 23}, {3993, 18}, {3994, 19}, {3995, 24}, {3996, 18}, {3997, 26}, {3998, 22}, {3999, 19}, {4000, 24}, {4001, 17}, {4002, 28}, {4003, 20}, {4004, 21}, {4005, 23}, {4006, 23}, {4007, 31}, {4008, 24}, 
        {4009, 27}, {4010, 30}, {4011, 28}, {4012, 30}, {4013, 10}, {4014, 21}, {4015, 28}, {4016, 16}, {4017, 18}, {4018, 11}, {4019, 21}, {4020, 21}, {4021, 21}, {4022, 26}, {4023, 19}, {4024, 22}, {4025, 31}, {4026, 28}, {4027, 17}, {4028, 19}, {4030, 14}, {4031, 15}, {4032, 19}, {4033, 11}, {4034, 18}, {4035, 27}, {4036, 20}, {4037, 19}, {4038, 3}, {4039, 28}, {4040, 18}, {4041, 18}, {4042, 21}, {4043, 24}, {4044, 30}, {4046, 8}, {4047, 11}, {4048, 10}, {4049, 20}, {4050, 8}, {4051, 22}, {4052, 29}, {4053, 35}, {4054, 36}, {4055, 40}, {4056, 41}, {4096, 22}, {4097, 29}, {4098, 23}, {4099, 22}, {4100, 22}, 
        {4101, 33}, {4102, 33}, {4103, 30}, {4104, 36}, {4105, 17}, {4106, 25}, {4107, 41}, {4108, 29}, {4109, 36}, {4110, 25}, {4111, 29}, {4112, 25}, {4113, 29}, {4114, 27}, {4115, 33}, {4116, 37}, {4117, 23}, {4118, 30}, {4119, 28}, {4120, 25}, {4121, 29}, {4122, 22}, {4123, 36}, {4124, 22}, {4125, 26}, {4126, 25}, {4127, 22}, {4128, 37}, {4129, 33}, {4131, 32}, {4132, 30}, {4133, 28}, {4134, 46}, {4135, 34}, {4137, 36}, {4138, 36}, {4139, 27}, {4140, 17}, {4141, 26}, {4142, 29}, {4143, 15}, {4144, 18}, {4145, 22}, {4146, 20}, {4150, 17}, {4151, 15}, {4152, 16}, {4153, 40}, {4154, 25}, {4155, 26}, {4156, 35}, 
        {4157, 18}, {4158, 15}, {4159, 29}, {4160, 28}, {4161, 22}, {4162, 14}, {4163, 28}, {4164, 28}, {4165, 30}, {4166, 44}, {4167, 28}, {4168, 30}, {4169, 33}, {4170, 10}, {4171, 21}, {4172, 50}, {4173, 58}, {4174, 28}, {4175, 52}, {4176, 24}, {4177, 24}, {4178, 25}, {4179, 28}, {4180, 29}, {4181, 28}, };


    // int[][] char_index_avg_data = {{97, 42}, {98, 49}, {99, 29}, {100, 49}, {101, 39}, {102, 34}, {103, 55}, {104, 44}, {105, 25}, {106, 34}, {107, 42}, {108, 29}, {109, 47}, {110, 37}, {111, 40}, {112, 48}, {113, 48}, {114, 27}, {115, 34}, {116, 34}, {117, 37}, {118, 30}, {119, 46}, {120, 34}, {121, 38}, {122, 36}, {123, 38}, {124, 19}, {125, 38}, {126, 14}};


    static public class Node {
        int ascii_index;
        char c;
        int average;
    }

    ArrayList<Node> nodes = new ArrayList<>();

    Comparator<Node> node_comparator_by_average = new Comparator<TPGraphics.Node>() {

        @Override
        public int compare(Node o1, Node o2) {
            if (o1.average < o2.average) return -1;
            if (o1.average > o2.average) return 1;
            return 0;
        }
    };



    // public final static String TERMINAL = "doeke.p5_terminal_render.TPGraphics";
    public final static String TERMINAL = MethodHandles.lookup().lookupClass().getName();

    boolean did_init = false;

    Terminal terminal;

    int[][] average_colors;
    int[] avg;

    Method method_setCurrentPG;

    PGraphics average;

    // @Override
    // public void endDraw_2() {
    //     report("top endDraw()");

    //     if (!drawing) {
    //         return;
    //     }

    //     // Flushing any remaining geometry.
    //     flush();

    //     if (primaryGraphics) {
    //         endOnscreenDraw();
    //     } else {
    //         endOffscreenDraw();
    //     }

    //     if (primaryGraphics) {
    //         setCurrentPG(null);
    //     } else {
    //         // .setCurrentPG();
    //         PGraphicsOpenGL primaryPG = getPrimaryPG();

    //         if (method_setCurrentPG == null) {
    //             method_setCurrentPG = null;
    //         }

    //         try {
    //             method_setCurrentPG.invoke(primaryPG, new Object[] {});
    //         } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
    //             // TODO Auto-generated catch block
    //             e.printStackTrace();
    //         }
    //     }
    //     drawing = false;
        
    //     report("bot endDraw()");
    // }
    
    public void endDraw() {
        
        // TODO better place
        if (!did_init) {

            for (int i = 0; i < char_index_avg_data.length; i++) {
                int[] data = char_index_avg_data[i];

                if (data[0] == 2375) continue;
                if (data[0] == 1539) continue;
                


                Node n = new Node();
                n.ascii_index = data[0];
                n.c = (char) data[0];
                n.average = data[1];
                nodes.add(n);

                if (i == 256) break;
            }
            nodes.sort(node_comparator_by_average);



            // PSurfaceJOGL surface = (PSurfaceJOGL) parent.getSurface();
            // hiding stops it from running... !@#%^&*
            // surface.setVisible(false);
            
            terminal = start_terminal_canvas();

            parent.registerMethod("post", this);
            
            did_init = true;
        }

        super.endDraw();

    }

    public void post() {

        
        if (terminal_buffer_resized(terminal)) {
            
            average = parent.createGraphics(terminal.cols * 2, terminal.rows * 2, P3D);
            avg = new int[(average.width/2) * (average.height/2)];
        }

        // parent.g.endDraw();

        average.beginDraw();
        average.image(parent.g, 0, 0, average.width, average.height);
        average.endDraw();
        average.loadPixels();

        
        for (int i = 0, y = 0; y < average.height; y += 2) {
            for (int x = 0; x < average.width; x += 2) {
                
                int r = 0;
                int g = 0;
                int b = 0;
                r += (average.pixels[y * average.width + x] >> 16) & 0xFF;
                r += (average.pixels[y * average.width + (x+1)] >> 16) & 0xFF;
                r += (average.pixels[(y+1) * average.width + (x+1)] >> 16) & 0xFF;
                r += (average.pixels[(y+1) * average.width + (x)] >> 16) & 0xFF;

                g += (average.pixels[y * average.width + x] >> 8) & 0xFF;
                g += (average.pixels[y * average.width + (x+1)] >> 8) & 0xFF;
                g += (average.pixels[(y+1) * average.width + (x+1)] >> 8) & 0xFF;
                g += (average.pixels[(y+1) * average.width + (x)] >> 8) & 0xFF;

                b += (average.pixels[y * average.width + x] >> 0) & 0xFF;
                b += (average.pixels[y * average.width + (x+1)] >> 0) & 0xFF;
                b += (average.pixels[(y+1) * average.width + (x+1)] >> 0) & 0xFF;
                b += (average.pixels[(y+1) * average.width + (x)] >> 0) & 0xFF;

                r /= 4;
                g /= 4;
                b /= 4;

                // make optional, reduce colors?
                int shift = 0;
                r = (r >> shift) << shift;
                g = (g >> shift) << shift;
                b = (b >> shift) << shift;
                
                avg[i++] = (r << 16) | (g << 8) | b;
            }
        }


        // parent.g.image(average, 0, 0);


        // super.endDraw();
        
        terminal_read_input((key)-> {
            // TODO
        });
        
        
        
        // set_text(terminal, "Foo", 0, 0);
        
        // parent.loadPixels();
        
        
        
        
        // average_colors = compute_average_colors(average_colors, parent.g, terminal.rows, terminal.cols);
        
        // for (int y = 0; y < terminal.rows; y++) {
        //     for (int x = 0; x < terminal.cols; x++) {
                
        //         int clr = average_colors[y][x];
                
        //         float brightness = brightness(clr);
                
        //         if (brightness == 0) {
        //             set_text(terminal, " ", x, y);
        //         }
        //         else {
        //             set_text(terminal, " ", x, y, 0, clr);
        //         }
                
        //     }
        // }

        Node search_node = new Node();

        int white = color(255);


        for (int i = 0, y = 0; y < terminal.rows; y++) {
            for (int x = 0; x < terminal.cols; x++) {
                
                //int clr = average.pixels[i];
                int clr = avg[i];

                int avg = (int) brightness(clr);
                avg /= 4;

                if (avg == 0) {
                    set_text(terminal, " ", x, y, white, 0); // █    
                }
                else {
                    search_node.average = avg;
                    int idx = Collections.binarySearch(nodes, search_node, node_comparator_by_average);
                    if (idx < 0) {
                        idx = Math.abs(idx)+1;
                    }
                    if (idx < nodes.size()) {
                        Node n = nodes.get(idx);
                        set_text(terminal, ""+n.c, x, y, clr, 0); // █
                    }
                    else {
                        set_text(terminal, "/", x, y, clr, 0); // █
                    }
                }
                i++;
            }
            set_text(terminal, "?", terminal.cols-1, y, -1, 0); // █
        }
        
        // super.endDraw();
        
        set_text(terminal, "fps: "+parent.frameRate, 0, 0);
        set_text(terminal, "last_time: "+last_time, 0, 1);
        
        int start = parent.millis();
        draw_terminal(terminal);
        int end = parent.millis() - start;

        last_time = end;
        
        // System.out.println("endDraw "+parent.frameCount);
    }
    
    int last_time;


    
    
    // what about the ratio?
    // not properly tested! maybe some values have to be rounded etc.
    int[][] compute_average_colors(int[][] result, PImage img, int rows, int cols) {
        
        if (result == null || result.length != rows || result[0].length != cols) {
            result = new int[rows][cols];
        }
        
        float w = (float) width / cols;
        float h = (float) height / rows;
        
        for (int y = 0; y < rows; y++) {
            for (int x = 0; x < cols; x++) {
                
                int x1 = (int) map(x, 0, cols, 0, img.width);
                int y1 = (int) map(y, 0, rows, 0, img.height);
                
                int avg = average(img, x1, y1, (int) (x1+w), (int) (y1+h));
                
                result[y][x] = avg;
            }
        }
        
        return result;
    }

    
    
    
    int average(PImage img, int x1, int y1, int x2, int y2) {
        
        int r = 0;
        int g = 0;
        int b = 0;
        
        for (int y = y1; y < y2; y++) {
            for (int x = x1; x < x2; x++) {
                int i = x + y * img.width;
                int argb = img.pixels[i];
                r += (argb >> 16) & 0xFF;
                g += (argb >> 8) & 0xFF;
                b += argb & 0xFF;  
            }
        }
        
        int c = (x2-x1) * (y2-y1);
        r /= c;
        g /= c;
        b /= c;
        
        return 0xFF << 24 | r << 16 | g << 8 | b;
    }
    
    
    
}